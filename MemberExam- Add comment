package bulletinboard;


import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class MemberExam {
	//Filed
	private Scanner scanner = new Scanner(System.in);
	private Connection conn;
	
	//Constructor
	public MemberExam() {
		//try-catch문은 예외를 처리하기 위한 구문
		try {
			//JDBC Driver 등록, mySql등록
			Class.forName("com.mysql.cj.jdbc.Driver");
			//연결하기
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/servletex?useUnicode=true&characterEncoding=utf8"
					,"root" ,"1234");
		}catch(Exception e) {  //Exception 예외처리 가장 상위 객체
			//e.printStackTrace: Controller/Service 사이에서 에러를 발생시키는 코드를 사용
			//printStackTrace: 예외 발생시 정보 출력 명령어
			e.printStackTrace();
			exit();
		}
	}
	
	
	//Method
	public void list() {
		//타이틀 및 컬럼명 출력
		//printf : %=각각의 문자열 시작, s = 문자열(string)형식으로 출력, - = 왼쪽으로 정렬
		System.out.println();
		System.out.println("[회원 목록]");
		System.out.println("--------------------------------------------------");
		System.out.printf("%-6s%-12s%-16s%-40s\n", "아이디","이름","email","가입일자");
		System.out.println("--------------------------------------------------");
		
		//boads 테이블에서 게시물 정보를 가져와서 출력하기
		
		try {
			String sql = "SELECT id, name, email, joinDate FROM t_member order by joinDate desc";
			//PrepareStatement: 선처리 방식으로 미리 컴파일된 SQL문을 가지고 있다가 동적으로 칼럼값을 채워 질의문을 수행할 수 있어 효율적인 SQL문을 구사할 수 있다.
			//				:컴파일된 sql문을 객체로 생성하는 명령어
			PreparedStatement pstmt = conn.prepareStatement(sql);
			/*
			 executeQuery(): select 문과 같은 쿼리문을 실행할 떄 사용
			 				뭐리를 실행하고, 결과를 ResultSet객체로 반환, 반환된 ResultSet객체를 통해 결과를 가져올수있다.
			 				db에서 가져와서 조회하는 명령어
			 */
			ResultSet rs = pstmt.executeQuery();
			
			//next() : 공백을 기준으로 한 단어 또는 한 문자씩 입력 받는다.
			//			버퍼에 입력된 문자나 문자열에서 공백 전까지의 단어를 읽는다.
			//while : 문장을 반복해서 수행해야 할 경우 사용
			while(rs.next()) {
				Member member = new Member();
				String id = rs.getString("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				Date joinDate = rs.getDate("joinDate");
				//member값 저장
				member.setId(id);
				member.setName(name);
				member.setEmail(email);
				member.setJoinDate(joinDate);
				//member값 불러온다
				System.out.printf("%-6s%-12s%-16s%-40s \n", member.getId(), member.getName(), member.getEmail(), member.getJoinDate());
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e) {
			e.printStackTrace();
			exit();
		}
		
		//메인메뉴 출력
		mainMenu();
	}
	
	public void mainMenu() {
		System.out.println();
		System.out.println("-------------------------------------------------");
		System.out.println("메인메뉴: 1.회원가입 | 2.회원보기 | 3.회원삭제 | 4.프로그램종료");
		System.out.println("메뉴선택: ");
		//nextLine(): 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다.
		//				버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
		String menuNo = scanner.nextLine();
		System.out.println();
	
		switch(menuNo) {
			case "1" -> create();
			case "2" -> read();
			case "3" -> clear();
			case "4" -> exit();
		}
	}
	public void create() {
		//입력 받기 
		Member member = new Member(); 
		System.out.println("[회원가입]"); 
		System.out.print("아이디: "); 
		member.setId(scanner.nextLine()); 
		System.out.print("비밀번호: ");
		member.setPwd(scanner.nextLine()); 
		System.out.print("이름: "); 
		member.setName(scanner.nextLine()); 
		System.out.print("email: "); 
		member.setEmail(scanner.nextLine());
		
		//보조메뉴 출력 
		System.out.println("-----------------------------------------------------------------------"); 
		System.out.println("가입하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		
		//nextLine(): 문자 또는 엔터를 치기 전까지의 문장 전체를 입력 받는다.
		//				버퍼에 입력된 문자열을 개행 문자까지 다 가져온다.
		String menuNo = scanner.nextLine();
		//equals(): 두 문자열의 내용을 비교해서 동일한 값을 가지고 있는지 확인
		if(menuNo.equals("1")) {
			//boards 테이블에 게시물 정보 저장
			try {
				
				String sql = "" + // "" + : 그냥 가독성을 위해 쓴다, 공백이 없으면 sql오류날수도 있어 쓴다.
						"INSERT INTO t_member( id, pwd, name, email, joinDate )"  +
						"VALUES( ?, ?, ?, ?,now())";
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, member.getId());
				pstmt.setString(2, member.getPwd());
				pstmt.setString(3, member.getName());
				pstmt.setString(4, member.getEmail());
				//executeUpdate()는 INSERT, UPDATE, DELETE와 같은 DML(Data Manipulation Language)에서 실행 결과로 영향을 받은 레코드 수를 반환한다.
				//executeUpdate()는 반환 타입이 int이므로, 쿼리 실행 결과로 반환되는 값을 int로 받아와야 한다.
				//executeUpdate()는 행의 개수를 반환하기 때문에  rs를 사용할 필요 없다.
				pstmt.executeUpdate();
				pstmt.close();
			}catch(Exception e) {
				e.printStackTrace();
				exit();
			}
		}
		
		//게시물 목록출력
		list();
	}
	public void read() {
		//입력 받기
		System.out.println("[회원 보기]");
		System.out.print("아이디: ");
		String _id = scanner.nextLine();
		
		//boards 테이블에서 해당 게시물을 가져와 출력
		try {
			String sql = "SELECT id, name, email, joinDate FROM t_member WHERE id=? "; 
			PreparedStatement pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, _id); 
			ResultSet rs = pstmt.executeQuery();
		
			if(rs.next()) { Member member = new Member(); 
				String id= rs.getString("id");
				String name = rs.getString("name"); 
				String email = rs.getString("email"); 
				Date joinDate = rs.getDate("joinDate"); 
				member.setId(id); 
				member.setName(name); 
				member.setEmail(email); 
				member.setJoinDate(joinDate); 
				System.out.println("#############"); 
				System.out.println("아이디: " + member.getId()); 
				System.out.println("이름: " + member.getName()); 
				System.out.println("email: " + member.getEmail()); 
				System.out.println("가입날짜: " + member.getJoinDate()); 
				//보조메뉴 출력 
				System.out.println("-------------------------------------------------------------------"); 
				System.out.println("회원수정: 1.Update | 2.Delete | 3.List"); 
				System.out.print("메뉴선택: "); 
				String menuNo = scanner.nextLine(); 
				System.out.println(); 

				if(menuNo.equals("1")) { update(member); } 
				else if(menuNo.equals("2")) { delete(member); } 
			}
			rs.close();
			pstmt.close();	//pstmt가 먼저 열려서 제일 나중에 닫아준다.
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
	
		//게시물 목록 출력
		list();
	}
	
	public void update(Member member) {
		//수정 내용 입력 받기
		System.out.println("[수정 내용 입력]"); 
		System.out.print("이름: "); 
		member.setName(scanner.nextLine()); 
		System.out.print("비밀번호: "); 
		member.setPwd(scanner.nextLine()); 
		System.out.print("email: "); 
		member.setEmail(scanner.nextLine());
		
		//보조메뉴 출력
		System.out.println("-------------------------------------------------------------------"); 
		System.out.println("수정하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		String menuNo = scanner.nextLine();
		
		if(menuNo.equals("1")) {
			//boards 테이블에서 게시물 정보 수정
			 try {
				 String sql = "" +
						 "UPDATE t_member SET pwd=?, name=?, email=? WHERE id=?"; 
						 PreparedStatement pstmt = conn.prepareStatement(sql); 
						 pstmt.setString(1, member.getPwd()); 
						 pstmt.setString(2, member.getName()); 
						 pstmt.setString(3, member.getEmail()); 
						 pstmt.setString(4, member.getId()); 
						 pstmt.executeUpdate(); 
						 pstmt.close(); 
			 }catch(Exception e) {
				 e.printStackTrace();
				 exit();
			 }
		}
		//게시물 목록 출력
		list();
	}
	
	public void delete(Member member) {
		//boards 테이블에 게시물 정보 삭제
		try {
			String sql = "DELETE FROM t_member WHERE id=?"; 
			PreparedStatement pstmt = conn.prepareStatement(sql); 
			pstmt.setString(1, member.getId()); 
			pstmt.executeUpdate(); 
			pstmt.close(); 
		}catch(Exception e) {
			e.printStackTrace();
			exit();
		}
		//게시물 목록 출력
		list();
	}
	
	public void clear() {
		System.out.println("[회원전체삭제]"); 
		System.out.println("-------------------------------------------------------------------"); 
		System.out.println("회원전체를 삭제하시겠습니까?: 1.Ok | 2.Cancel"); 
		System.out.print("메뉴선택: "); 
		String menuNo = scanner.nextLine();
		if(menuNo.equals("1")) {
			//boards 테이블에 게시물 정보 전체 삭제
			try {
				/*
				TURNCAT는 숫자 데이터를 반올림, 버림하는 숫자를 다듬을때 '버림'을 실행하는 함수
				테이블의 모든 행(ROW)의 데이터 삭제
				행 자체도 삭제
				삭제된 행이 사용하고 있었던 저장공간을 반납
				테이블의 인덱스(index)도 삭제됨
				*/
				String sql = "TRUNCATE TABLE t_member"; 
				PreparedStatement pstmt = conn.prepareStatement(sql); 
				pstmt.executeUpdate(); 
				pstmt.close(); 
			}catch(Exception e) {
				e.printStackTrace();
				exit();
			}
		}
		//게시물 목록 출력
		list();
	}
	public void exit() {
		if(conn != null) {
			try {
				conn.close();
			}catch(SQLException e) {}
		}
		System.out.println("**회원 게시판 종료**");
		System.exit(0);
	}
	
	public static void main(String[] args) {
		MemberExam memberExam = new MemberExam();
		memberExam.list();
	}
}
